// Code generated by "enumer -type=TraceExporterType -json -text -yaml -trimprefix=TraceExporterType -transform=snake -output=enum_traceexportertype_gen.go"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TraceExporterTypeName = "stdouthttp"

var _TraceExporterTypeIndex = [...]uint8{0, 6, 10}

const _TraceExporterTypeLowerName = "stdouthttp"

func (i TraceExporterType) String() string {
	if i < 0 || i >= TraceExporterType(len(_TraceExporterTypeIndex)-1) {
		return fmt.Sprintf("TraceExporterType(%d)", i)
	}
	return _TraceExporterTypeName[_TraceExporterTypeIndex[i]:_TraceExporterTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TraceExporterTypeNoOp() {
	var x [1]struct{}
	_ = x[TraceExporterTypeStdout-(0)]
	_ = x[TraceExporterTypeHTTP-(1)]
}

var _TraceExporterTypeValues = []TraceExporterType{TraceExporterTypeStdout, TraceExporterTypeHTTP}

var _TraceExporterTypeNameToValueMap = map[string]TraceExporterType{
	_TraceExporterTypeName[0:6]:       TraceExporterTypeStdout,
	_TraceExporterTypeLowerName[0:6]:  TraceExporterTypeStdout,
	_TraceExporterTypeName[6:10]:      TraceExporterTypeHTTP,
	_TraceExporterTypeLowerName[6:10]: TraceExporterTypeHTTP,
}

var _TraceExporterTypeNames = []string{
	_TraceExporterTypeName[0:6],
	_TraceExporterTypeName[6:10],
}

// TraceExporterTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TraceExporterTypeString(s string) (TraceExporterType, error) {
	if val, ok := _TraceExporterTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TraceExporterTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TraceExporterType values", s)
}

// TraceExporterTypeValues returns all values of the enum
func TraceExporterTypeValues() []TraceExporterType {
	return _TraceExporterTypeValues
}

// TraceExporterTypeStrings returns a slice of all String values of the enum
func TraceExporterTypeStrings() []string {
	strs := make([]string, len(_TraceExporterTypeNames))
	copy(strs, _TraceExporterTypeNames)
	return strs
}

// IsATraceExporterType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TraceExporterType) IsATraceExporterType() bool {
	for _, v := range _TraceExporterTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for TraceExporterType
func (i TraceExporterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for TraceExporterType
func (i *TraceExporterType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("TraceExporterType should be a string, got %s", data)
	}

	var err error
	*i, err = TraceExporterTypeString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for TraceExporterType
func (i TraceExporterType) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for TraceExporterType
func (i *TraceExporterType) UnmarshalText(text []byte) error {
	var err error
	*i, err = TraceExporterTypeString(string(text))
	return err
}

// MarshalYAML implements a YAML Marshaler for TraceExporterType
func (i TraceExporterType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for TraceExporterType
func (i *TraceExporterType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = TraceExporterTypeString(s)
	return err
}
